/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { EmployeeInfo } from "./EmployeeInfo";
import { EmployeeInfoCountArgs } from "./EmployeeInfoCountArgs";
import { EmployeeInfoFindManyArgs } from "./EmployeeInfoFindManyArgs";
import { EmployeeInfoFindUniqueArgs } from "./EmployeeInfoFindUniqueArgs";
import { DeleteEmployeeInfoArgs } from "./DeleteEmployeeInfoArgs";
import { EmployeeInfoService } from "../employeeInfo.service";
@graphql.Resolver(() => EmployeeInfo)
export class EmployeeInfoResolverBase {
  constructor(protected readonly service: EmployeeInfoService) {}

  async _employeeInfosMeta(
    @graphql.Args() args: EmployeeInfoCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [EmployeeInfo])
  async employeeInfos(
    @graphql.Args() args: EmployeeInfoFindManyArgs
  ): Promise<EmployeeInfo[]> {
    return this.service.employeeInfos(args);
  }

  @graphql.Query(() => EmployeeInfo, { nullable: true })
  async employeeInfo(
    @graphql.Args() args: EmployeeInfoFindUniqueArgs
  ): Promise<EmployeeInfo | null> {
    const result = await this.service.employeeInfo(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => EmployeeInfo)
  async deleteEmployeeInfo(
    @graphql.Args() args: DeleteEmployeeInfoArgs
  ): Promise<EmployeeInfo | null> {
    try {
      return await this.service.deleteEmployeeInfo(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
