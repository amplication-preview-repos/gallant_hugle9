/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { EmployeeInfoService } from "../employeeInfo.service";
import { EmployeeInfoCreateInput } from "./EmployeeInfoCreateInput";
import { EmployeeInfo } from "./EmployeeInfo";
import { EmployeeInfoFindManyArgs } from "./EmployeeInfoFindManyArgs";
import { EmployeeInfoWhereUniqueInput } from "./EmployeeInfoWhereUniqueInput";
import { EmployeeInfoUpdateInput } from "./EmployeeInfoUpdateInput";

export class EmployeeInfoControllerBase {
  constructor(protected readonly service: EmployeeInfoService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: EmployeeInfo })
  async createEmployeeInfo(
    @common.Body() data: EmployeeInfoCreateInput
  ): Promise<EmployeeInfo> {
    return await this.service.createEmployeeInfo({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [EmployeeInfo] })
  @ApiNestedQuery(EmployeeInfoFindManyArgs)
  async employeeInfos(@common.Req() request: Request): Promise<EmployeeInfo[]> {
    const args = plainToClass(EmployeeInfoFindManyArgs, request.query);
    return this.service.employeeInfos({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: EmployeeInfo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async employeeInfo(
    @common.Param() params: EmployeeInfoWhereUniqueInput
  ): Promise<EmployeeInfo | null> {
    const result = await this.service.employeeInfo({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: EmployeeInfo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateEmployeeInfo(
    @common.Param() params: EmployeeInfoWhereUniqueInput,
    @common.Body() data: EmployeeInfoUpdateInput
  ): Promise<EmployeeInfo | null> {
    try {
      return await this.service.updateEmployeeInfo({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: EmployeeInfo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteEmployeeInfo(
    @common.Param() params: EmployeeInfoWhereUniqueInput
  ): Promise<EmployeeInfo | null> {
    try {
      return await this.service.deleteEmployeeInfo({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
