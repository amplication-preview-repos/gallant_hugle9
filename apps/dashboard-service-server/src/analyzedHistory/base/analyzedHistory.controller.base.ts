/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AnalyzedHistoryService } from "../analyzedHistory.service";
import { AnalyzedHistoryCreateInput } from "./AnalyzedHistoryCreateInput";
import { AnalyzedHistory } from "./AnalyzedHistory";
import { AnalyzedHistoryFindManyArgs } from "./AnalyzedHistoryFindManyArgs";
import { AnalyzedHistoryWhereUniqueInput } from "./AnalyzedHistoryWhereUniqueInput";
import { AnalyzedHistoryUpdateInput } from "./AnalyzedHistoryUpdateInput";

export class AnalyzedHistoryControllerBase {
  constructor(protected readonly service: AnalyzedHistoryService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AnalyzedHistory })
  async createAnalyzedHistory(
    @common.Body() data: AnalyzedHistoryCreateInput
  ): Promise<AnalyzedHistory> {
    return await this.service.createAnalyzedHistory({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AnalyzedHistory] })
  @ApiNestedQuery(AnalyzedHistoryFindManyArgs)
  async analyzedHistories(
    @common.Req() request: Request
  ): Promise<AnalyzedHistory[]> {
    const args = plainToClass(AnalyzedHistoryFindManyArgs, request.query);
    return this.service.analyzedHistories({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AnalyzedHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async analyzedHistory(
    @common.Param() params: AnalyzedHistoryWhereUniqueInput
  ): Promise<AnalyzedHistory | null> {
    const result = await this.service.analyzedHistory({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AnalyzedHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAnalyzedHistory(
    @common.Param() params: AnalyzedHistoryWhereUniqueInput,
    @common.Body() data: AnalyzedHistoryUpdateInput
  ): Promise<AnalyzedHistory | null> {
    try {
      return await this.service.updateAnalyzedHistory({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AnalyzedHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAnalyzedHistory(
    @common.Param() params: AnalyzedHistoryWhereUniqueInput
  ): Promise<AnalyzedHistory | null> {
    try {
      return await this.service.deleteAnalyzedHistory({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
