/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  AnalyzedHistory as PrismaAnalyzedHistory,
} from "@prisma/client";

export class AnalyzedHistoryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AnalyzedHistoryCountArgs, "select">
  ): Promise<number> {
    return this.prisma.analyzedHistory.count(args);
  }

  async analyzedHistories(
    args: Prisma.AnalyzedHistoryFindManyArgs
  ): Promise<PrismaAnalyzedHistory[]> {
    return this.prisma.analyzedHistory.findMany(args);
  }
  async analyzedHistory(
    args: Prisma.AnalyzedHistoryFindUniqueArgs
  ): Promise<PrismaAnalyzedHistory | null> {
    return this.prisma.analyzedHistory.findUnique(args);
  }
  async createAnalyzedHistory(
    args: Prisma.AnalyzedHistoryCreateArgs
  ): Promise<PrismaAnalyzedHistory> {
    return this.prisma.analyzedHistory.create(args);
  }
  async updateAnalyzedHistory(
    args: Prisma.AnalyzedHistoryUpdateArgs
  ): Promise<PrismaAnalyzedHistory> {
    return this.prisma.analyzedHistory.update(args);
  }
  async deleteAnalyzedHistory(
    args: Prisma.AnalyzedHistoryDeleteArgs
  ): Promise<PrismaAnalyzedHistory> {
    return this.prisma.analyzedHistory.delete(args);
  }
}
